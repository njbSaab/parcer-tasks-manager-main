const express = require("express");
const router = express.Router();
const {
  ensureDatabaseInitialized,
} = require("../../controllers/databaseController");
const AppDataSource = require("../../config/database"); 
const Task = require("../../models/taskModel");
const scheduleParserTask = require("../../utils/scheduleParser");
const TaskLog = require("../../models/taskLogModel");

router.post("/parser", async (req, res) => {
  const { url, content, interval, frequency, period, userId } = req.body;

  console.log("–î–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º:", req.body);

  if (!url || !content || !interval || !userId) {
    console.error("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:", req.body);
    return res.status(400).json({
      error: "–í—Å–µ –ø–æ–ª—è (url, content, interval, userId) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.",
    });
  }
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...");

  // const existingTasks = await AppDataSource.getRepository(Task).find({
  //   where: { url, content, user_id: userId },
  // });

  // if (existingTasks.length > 0) {
  //   console.log("–î—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞:", existingTasks);
  //   return res.status(409).json({ error: "–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  // }

  if (isNaN(userId)) {
    console.error("–û—à–∏–±–∫–∞: userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", userId);
    return res.status(400).json({ error: "userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º." });
  }

  try {
    console.log("Period –ø–æ–ª—É—á–µ–Ω:", period);
    await ensureDatabaseInitialized(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    const taskRepo = AppDataSource.getRepository(Task);
    console.log("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω.");

    const newTask = taskRepo.create({
      user_id: userId,
      name: `üîé ${url}`,
      url,
      content,
      interval,
      frequency,
      period,
    });

    console.log("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", newTask);

    await taskRepo.save(newTask);
    console.log("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");

    // –ü–µ—Ä–µ–¥–∞–µ–º `task_id` –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await scheduleParserTask(newTask.id, url, content, interval);

    res.status(200).json({
      message: "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.",
      task: newTask,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏" });
  }
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
router.get("/", async (req, res) => {
  try {
    const taskRepo = AppDataSource.getRepository(Task);
    const tasks = await taskRepo.find();
    res.status(200).json(tasks);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á" });
  }
});
// –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞–¥–∞—á–∏ –ø–æ task_id
router.get("/:task_id/logs", async (req, res) => {
  const { task_id } = req.params;

  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ logRepo –ø–æ–ª—É—á–∞–µ—Ç TaskLog
    const logRepo = AppDataSource.getRepository(TaskLog);
    const logs = await logRepo.find({
      where: { task_id },
      order: { created_at: "DESC" },
    });
    
    res.status(200).json(logs);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤" });
  }
});

module.exports = router;
