router.get("/user/:userId", async (req, res) => {
  const { userId } = req.params;

  console.log("Получен запрос на получение задач пользователя:", userId);

  // Проверка на число
  if (isNaN(userId)) {
    console.error("Ошибка: userId должен быть числом.", userId);
    return res.status(400).json({ error: "userId должен быть числом." });
  }

  try {
    const taskRepo = AppDataSource.getRepository(Task);
    console.log("Репозиторий задач получен.");

    const tasks = await taskRepo.find({ where: { user_id: userId } });

    if (!tasks.length) {
      console.warn("Задачи для пользователя не найдены.", userId);
      return res
        .status(404)
        .json({ error: "Для указанного пользователя задачи не найдены." });
    }

    console.log("Найдены задачи для пользователя:", tasks);

    res.status(200).json({ tasks });
  } catch (error) {
    console.error("Ошибка при получении задач:", error.message);
    res.status(500).json({ error: "Ошибка при получении задач" });
  }
});







// const express = require("express");
// const AppDataSource = require("../../config/database");
// const User = require("../../models/userModel");

// const router = express.Router();

// router.post("/save", async (req, res) => {
//   const userData = req.body;

//   if (!userData || !userData.id) {
//     console.error("Недостаточно данных для сохранения пользователя.");
//     return res
//       .status(400)
//       .json({ success: false, error: "Недостаточно данных" });
//   }

//   try {
//     // Проверяем, инициализирован ли AppDataSource
//     if (!AppDataSource || !AppDataSource.isInitialized) {
//       console.log("Повторная инициализация AppDataSource...");
//       await AppDataSource.initialize();
//     }

//     const userRepo = AppDataSource.getRepository(User);

//     let user = await userRepo.findOne({ where: { telegram_id: userData.id } });

//     if (!user) {
//       user = userRepo.create({
//         telegram_id: userData.id,
//         first_name: userData.first_name,
//         last_name: userData.last_name,
//         username: userData.username,
//         languageCode: userData.language_code,
//       });
//     } else {
//       user.first_name = userData.first_name;
//       user.last_name = userData.last_name;
//       user.username = userData.username;
//       user.languageCode = userData.language_code;
//     }

//     await userRepo.save(user);

//     console.log("Пользователь успешно сохранен:", user);
//     res.json({ success: true, user });
//   } catch (error) {
//     console.error("Ошибка при сохранении пользователя:", error);
//     res.status(500).json({ success: false, error: "Ошибка сервера" });
//   }
// });

// module.exports = router;
